// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > async > stdout 1`] = `"works"`;

exports[`fixtures > async > stdout 2`] = `"works"`;

exports[`fixtures > async:eval > stdout 1`] = `"works"`;

exports[`fixtures > circular > stdout 1`] = `"FooBar"`;

exports[`fixtures > circular > stdout 2`] = `"FooBar"`;

exports[`fixtures > circular:eval > stdout 1`] = `"FooBar"`;

exports[`fixtures > env > stdout 1`] = `
"process.env.TEST true
import.meta.env.TEST true"
`;

exports[`fixtures > env > stdout 2`] = `
"process.env.TEST true
import.meta.env.TEST true"
`;

exports[`fixtures > env:eval > stdout 1`] = `
"process.env.TEST true
import.meta.env.TEST true"
`;

exports[`fixtures > error-parse > stderr 1`] = `
"<root>/lib/index.js:2
  throw err; /* ↓ Check stack trace ↓ */
  ^

Error: ParseError: \`import\` can only be used in \`import 
 <cwd>/index.ts
    at Object.<anonymous> (<root>/bin/jiti)
    at Module._compile (internal/modules/cjs/loader)
    at Object.Module._extensions..js (internal/modules/cjs/loader)
    at Module.load (internal/modules/cjs/loader)
    at Function.Module._load (internal/modules/cjs/loader)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)
    at internal/main/run_main_module"
`;

exports[`fixtures > error-parse > stderr 2`] = `
"<root>/lib/index.js:2
  throw err; /* ↓ Check stack trace ↓ */
  ^

[Error: ParseError: \`import\` can only be used in \`import 
 error-parse/index.ts:3:18]"
`;

exports[`fixtures > error-parse > stdout 1`] = `""`;

exports[`fixtures > error-parse > stdout 2`] = `""`;

exports[`fixtures > error-parse:eval > stderr 1`] = `
"<root>/lib/index.js:2
  throw err; /* ↓ Check stack trace ↓ */
  ^

[Error: ParseError: \`import\` can only be used in \`import 
 error-parse/index.ts:3:18]"
`;

exports[`fixtures > error-parse:eval > stdout 1`] = `""`;

exports[`fixtures > error-runtime > stderr 1`] = `
"<root>/lib/index.js:2
  throw err; /* ↓ Check stack trace ↓ */
  ^

TypeError: The \\"listener\\" argument must be of type function. Received undefined
    at checkListener (events)
    at _addListener (events)
    at process.addListener (events)
    at <cwd>/index.ts
    at evalModule (<root>/dist/jiti)
    at jiti (<root>/dist/jiti)
    at Object.<anonymous> (<root>/bin/jiti)
    at Module._compile (internal/modules/cjs/loader)
    at Object.Module._extensions..js (internal/modules/cjs/loader)
    at Module.load (internal/modules/cjs/loader)
    at Function.Module._load (internal/modules/cjs/loader)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)
    at internal/main/run_main_module {
  code: 'ERR_INVALID_ARG_TYPE'
}"
`;

exports[`fixtures > error-runtime > stderr 2`] = `
"<root>/lib/index.js:2
  throw err; /* ↓ Check stack trace ↓ */
  ^

TypeError: The \\"listener\\" argument must be of type function. Received undefined
    at checkListener (events)
    at _addListener (events)
    at process.addListener (events)
    at error-runtime/index.ts
    at Function.evalModule (<root>/dist/jiti)
    at Object.<anonymous> (<root>/test/bin/eval-jiti)
    at Module._compile (internal/modules/cjs/loader)
    at Object.Module._extensions..js (internal/modules/cjs/loader)
    at Module.load (internal/modules/cjs/loader)
    at Function.Module._load (internal/modules/cjs/loader)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)
    at internal/main/run_main_module {
  code: 'ERR_INVALID_ARG_TYPE'
}"
`;

exports[`fixtures > error-runtime > stdout 1`] = `""`;

exports[`fixtures > error-runtime > stdout 2`] = `""`;

exports[`fixtures > error-runtime:eval > stderr 1`] = `
"<root>/lib/index.js:2
  throw err; /* ↓ Check stack trace ↓ */
  ^

TypeError: The \\"listener\\" argument must be of type function. Received undefined
    at checkListener (events)
    at _addListener (events)
    at process.addListener (events)
    at error-runtime/index.ts
    at Function.evalModule (<root>/dist/jiti)
    at Object.<anonymous> (<root>/test/bin/eval-jiti)
    at Module._compile (internal/modules/cjs/loader)
    at Object.Module._extensions..js (internal/modules/cjs/loader)
    at Module.load (internal/modules/cjs/loader)
    at Function.Module._load (internal/modules/cjs/loader)
    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)
    at internal/main/run_main_module {
  code: 'ERR_INVALID_ARG_TYPE'
}"
`;

exports[`fixtures > error-runtime:eval > stdout 1`] = `""`;

exports[`fixtures > esm > stdout 1`] = `
"{ utilsLib: { utils: { a: 'a', default: 'default' }, version: '123' } }
{
  file: '<cwd>/test.js',
  dir: '<cwd>',
  'import.meta.url': 'file://<cwd>/test.js',
  stack: [
    'at getStack (<cwd>/test)',
    'at test (<cwd>/test)',
    'at <cwd>/index.js',
    'at evalModule (<root>/dist/jiti)',
    'at jiti (<root>/dist/jiti)',
    'at Object.<anonymous> (<root>/bin/jiti)',
    'at Module._compile (internal/modules/cjs/loader)',
    'at Object.Module._extensions..js (internal/modules/cjs/loader)',
    'at Module.load (internal/modules/cjs/loader)',
    'at Function.Module._load (internal/modules/cjs/loader)',
    'at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)',
    'at internal/main/run_main_module'
  ]
}"
`;

exports[`fixtures > esm > stdout 2`] = `
"{ utilsLib: { utils: { a: 'a', default: 'default' }, version: '123' } }
{
  file: '<cwd>/test.js',
  dir: '<cwd>',
  'import.meta.url': 'file://<cwd>/test.js',
  stack: [
    'at getStack (<cwd>/test)',
    'at test (<cwd>/test)',
    'at esm/index.js',
    'at Function.evalModule (<root>/dist/jiti)',
    'at Object.<anonymous> (<root>/test/bin/eval-jiti)',
    'at Module._compile (internal/modules/cjs/loader)',
    'at Object.Module._extensions..js (internal/modules/cjs/loader)',
    'at Module.load (internal/modules/cjs/loader)',
    'at Function.Module._load (internal/modules/cjs/loader)',
    'at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)',
    'at internal/main/run_main_module'
  ]
}"
`;

exports[`fixtures > esm:eval > stdout 1`] = `
"{ utilsLib: { utils: { a: 'a', default: 'default' }, version: '123' } }
{
  file: '<cwd>/test.js',
  dir: '<cwd>',
  'import.meta.url': 'file://<cwd>/test.js',
  stack: [
    'at getStack (<cwd>/test)',
    'at test (<cwd>/test)',
    'at esm/index.js',
    'at Function.evalModule (<root>/dist/jiti)',
    'at Object.<anonymous> (<root>/test/bin/eval-jiti)',
    'at Module._compile (internal/modules/cjs/loader)',
    'at Object.Module._extensions..js (internal/modules/cjs/loader)',
    'at Module.load (internal/modules/cjs/loader)',
    'at Function.Module._load (internal/modules/cjs/loader)',
    'at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main)',
    'at internal/main/run_main_module'
  ]
}"
`;

exports[`fixtures > exotic > stdout 1`] = `
"Typescript: true
Config: true"
`;

exports[`fixtures > exotic > stdout 2`] = `
"Typescript: true
Config: true"
`;

exports[`fixtures > exotic:eval > stdout 1`] = `
"Typescript: true
Config: true"
`;

exports[`fixtures > hashbang > stdout 1`] = `"1"`;

exports[`fixtures > hashbang > stdout 2`] = `"1"`;

exports[`fixtures > hashbang:eval > stdout 1`] = `"1"`;

exports[`fixtures > import-map > stdout 1`] = `"{ alias: 'alias' }"`;

exports[`fixtures > import-map > stdout 2`] = `"{ alias: 'alias' }"`;

exports[`fixtures > import-map:eval > stdout 1`] = `"{ alias: 'alias' }"`;

exports[`fixtures > json > stdout 1`] = `
"Imported : { test: 123 } .default: { test: 123 }
Imported with assertion : { test: 123 } .default: { test: 123 }
Required : { test: 123 } .default: { test: 123 }
Dynamic Imported : { test: 123 } .default: { test: 123 }"
`;

exports[`fixtures > json > stdout 2`] = `
"Imported : { test: 123 } .default: { test: 123 }
Imported with assertion : { test: 123 } .default: { test: 123 }
Required : { test: 123 } .default: { test: 123 }
Dynamic Imported : { test: 123 } .default: { test: 123 }"
`;

exports[`fixtures > json:eval > stdout 1`] = `
"Imported : { test: 123 } .default: { test: 123 }
Imported with assertion : { test: 123 } .default: { test: 123 }
Required : { test: 123 } .default: { test: 123 }
Dynamic Imported : { test: 123 } .default: { test: 123 }"
`;

exports[`fixtures > mixed > stdout 1`] = `"Mixed works for: <cwd>"`;

exports[`fixtures > mixed > stdout 2`] = `"Mixed works for: <cwd>"`;

exports[`fixtures > mixed:eval > stdout 1`] = `"Mixed works for: <cwd>"`;

exports[`fixtures > native > stdout 1`] = `"[Module: null prototype] { default: { hasRequire: false } }"`;

exports[`fixtures > native > stdout 2`] = `"{ default: { hasRequire: true } }"`;

exports[`fixtures > native:eval > stdout 1`] = `"{ default: { hasRequire: true } }"`;

exports[`fixtures > proto > stdout 1`] = `"exists: true"`;

exports[`fixtures > proto > stdout 2`] = `"exists: true"`;

exports[`fixtures > proto:eval > stdout 1`] = `"exists: true"`;

exports[`fixtures > pure-esm-dep > stdout 1`] = `
"Enter Program
Enter VariableDeclaration
Enter VariableDeclarator
Enter Identifier
Enter Literal"
`;

exports[`fixtures > pure-esm-dep > stdout 2`] = `
"Enter Program
Enter VariableDeclaration
Enter VariableDeclarator
Enter Identifier
Enter Literal"
`;

exports[`fixtures > pure-esm-dep:eval > stdout 1`] = `
"Enter Program
Enter VariableDeclaration
Enter VariableDeclarator
Enter Identifier
Enter Literal"
`;

exports[`fixtures > syntax > stdout 1`] = `
"Optional chaining: undefined
Nullish coalescing: 0
Logical or assignment: 50 title is empty.
Logical nullish assignment: 50 20"
`;

exports[`fixtures > syntax > stdout 2`] = `
"Optional chaining: undefined
Nullish coalescing: 0
Logical or assignment: 50 title is empty.
Logical nullish assignment: 50 20"
`;

exports[`fixtures > syntax:eval > stdout 1`] = `
"Optional chaining: undefined
Nullish coalescing: 0
Logical or assignment: 50 title is empty.
Logical nullish assignment: 50 20"
`;

exports[`fixtures > typescript > stdout 1`] = `
"Decorator metadata keys: design:type
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 1 arguments.
{
  file: '<cwd>/test.ts',
  dir: '<cwd>',
  resolve: '<cwd>/test.ts'
} undefined [class DecoratedClass]
{
  satisfiesTest: {
    firstTest: { name: 'first', avatar: 'https://example.com/first.png' },
    secondTest: { name: 'second', avatar: [Object] },
    normalizeUserEntity: [Function: normalizeUserEntity]
  }
}
child"
`;

exports[`fixtures > typescript > stdout 2`] = `
"Decorator metadata keys: design:type
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 1 arguments.
{
  file: '<cwd>/test.ts',
  dir: '<cwd>',
  resolve: '<cwd>/test.ts'
} undefined [class DecoratedClass]
{
  satisfiesTest: {
    firstTest: { name: 'first', avatar: 'https://example.com/first.png' },
    secondTest: { name: 'second', avatar: [Object] },
    normalizeUserEntity: [Function: normalizeUserEntity]
  }
}
child"
`;

exports[`fixtures > typescript:eval > stdout 1`] = `
"Decorator metadata keys: design:type
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 3 arguments.
Decorator called with 1 arguments.
{
  file: '<cwd>/test.ts',
  dir: '<cwd>',
  resolve: '<cwd>/test.ts'
} undefined [class DecoratedClass]
{
  satisfiesTest: {
    firstTest: { name: 'first', avatar: 'https://example.com/first.png' },
    secondTest: { name: 'second', avatar: [Object] },
    normalizeUserEntity: [Function: normalizeUserEntity]
  }
}
child"
`;
